
Left  = 0x00000000
Right = 0x00000000

Key = {0x0000000f,0x000000f0,0x00000f00,0x0000f000,0x000f0000,0x00f00000,0x0f000000,0xf0000000}
--Key = {0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000}
--Key = {0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff}

----[[
SBoxTable = {
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF}}
--]]
--[[ 
SBoxTable = {
  {0x4,0xa,0x9,0x2,0xd,0x8,0x0,0xe,0x6,0xb,0x1,0xc,0x7,0xf,0x5,0x3},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF},
  {0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF}}  
--]]
Hex = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}
SBox  = {}

function Input(str)
  os.execute("cls")
  print('Input 64 bit hex string or will be used default')
  local input = io.read()
  if not (input == '') then str = input end
  strLeft = string.sub(str,1,8)
  strRight = string.sub(str,9,16)
  Left = tonumber(strLeft,16)
  Right = tonumber(strRight,16)
end

function DecToHex(Temp)
  local Out = ''
  for i=1,8 do
    local Nibble = Temp % 16
    Temp = (Temp-Nibble)/16
    Out = Hex[Nibble+1]..Out
  end
  return Out  
end

function RefreshKey()
  for i=1,8 do
    Key[8+i]=Key[i]
  end
  for i=1,8 do
    Key[16+i]=Key[i]
  end
  for i=1,8 do
    Key[24+i]=Key[9-i]
  end
end

function Encode()
  Input('F0000000F0000000')
  print('Input: '..DecToHex(Left)..' '..DecToHex(Right))
  for i=1,32 do
    local Temp = Right+Key[i]
    for j=1,8 do
      local Nibble = Temp % 16
      Temp = (Temp-Nibble)/16
      SBox[j]=Nibble
      SBox[j]=SBoxTable[j][SBox[j]+1] --Подстановка
    end
    for j=1,11 do
    local First = SBox[1]
      for k=1,8 do
        SBox[k]=SBox[k+1]
      end
      SBox[8]=First
    end    
    local Out = 0
    for j=1,8 do
      Out = Out + SBox[j]*(16^(j-1))
    end    
    --print(Left..' '..Right..' '..Out)
    Temp = bit32.bxor(Left,Out)
    Left = Right
    Right = Temp
  end
  print('Output: '..DecToHex(Left)..' '..DecToHex(Right))
  print('Press enter')
  io.read()
end

function Decode()
  Input('BF6ED218D692BA32')
  print('Input: '..DecToHex(Left)..' '..DecToHex(Right))
  for i=1,32 do
    local Temp = Left+Key[33-i]
    for j=1,8 do
      local Nibble = Temp % 16
      Temp = (Temp-Nibble)/16
      SBox[j]=Nibble
      SBox[j]=SBoxTable[j][SBox[j]+1] --Подстановка
    end
    for j=1,11 do
    local First = SBox[1]
      for k=1,8 do
        SBox[k]=SBox[k+1]
      end
      SBox[8]=First
    end    
    local Out = 0
    for j=1,8 do
      Out = Out + SBox[j]*(16^(j-1))
    end    
    --print(Left..' '..Right..' '..Out)
    Temp = bit32.bxor(Right,Out)
    Right = Left
    Left = Temp
  end
  print('Output: '..DecToHex(Left)..' '..DecToHex(Right))
  print('Press enter')
  io.read()  
end

function ChangeKey()
  print('Input new key:')
  local str = io.read()
  for i=1,8 do
    Key[i] = string.sub(str,1+8*(i-1),8+8*(i-1))
  end
  RefreshKey()  
end

function About()
  os.execute("cls")
  print('+----------------------------------------------------------------+')
  print('|GOST 28147 Encoder-Decoder                                      |')
  print('| _____   _____   _____  _____   _____   _____            _____  |')
  print('|/     \\ /     \\ /     \\   |          | |     | | |     |      | |')
  print('||    _  |     | \\_____    |     _____| |_____| | |_____|      | |')
  print('||     \\ |     |       \\   |    |       |     | |       |      | |')
  print('|\\_____/ \\_____/ \\_____/   |    |_____  |_____| |       |      | |')
  print('|                                                                |')
  print('|Created by Artyom Rybakov 2015                                  |')
  print('+----------------------------------------------------------------+')
  io.read()
end
     
function Menu()
  os.execute("cls")
  print('1.Encode')
  print('2.Decode')
  print('3.Change key')
  print('4.About')
  print('5.Exit')
  print('Select 1-5')
  Select = io.read()
  if Select == '1' then Encode()
  elseif Select == '2' then Decode()
  elseif Select == '3' then ChangeKey()
  elseif Select == '4' then About()
  elseif Select == '5' then return 0
  end
  return 1
end

RefreshKey()
X = 1
repeat
X = Menu()
until X == 0
